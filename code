import numpy as np

# Fungsi yang ingin diintegrasi
def fungsi(x):
    return np.sin(x)  # Ganti sesuai kebutuhan

# Implementasi metode Romberg
def integrasi_romberg(fungsi, batas_awal, batas_akhir, maks_iterasi=5):
    tabel = np.zeros((maks_iterasi, maks_iterasi))
    h = batas_akhir - batas_awal

    # Trapezoidal awal (iterasi pertama)
    tabel[0][0] = 0.5 * h * (fungsi(batas_awal) + fungsi(batas_akhir))
    print(f"R[0][0] = {tabel[0][0]:.10f}")

    for i in range(1, maks_iterasi):
        h /= 2 # step-size dibagi 2 setiap iterasi

        jumlah = 0
        for k in range(1, 2**(i - 1) + 1):
            titik = batas_awal + (2 * k - 1) * h
            jumlah += fungsi(titik)

        # Trapezoidal tahap berikutnya (Mengisi tabel[i][0])
        tabel[i][0] = 0.5 * tabel[i - 1][0] + h * jumlah
        print(f"R[{i}][0] = {tabel[i][0]:.10f}")

        # Richardson Extrapolation:
        # meningkatkan akurasi tanpa tambah titik evaluasi
        for j in range(1, i + 1):
            atas = 4 * j * tabel[i][j - 1] - tabel[i - 1][j - 1]
            bawah = 4 * j - 1
            tabel[i][j] = atas / bawah
            print(f"R[{i}][{j}] = {tabel[i][j]:.10f}")

    # Cetak hasil akhir tabel Romberg (menurun ke bawah)
    print("\nTabel Romberg:")
    for i in range(maks_iterasi):
        for j in range(i + 1):
            print(f"{tabel[i][j]:.10f}", end=" ")
        print()

    return tabel[maks_iterasi - 1][maks_iterasi - 1]

# Contoh penggunaan
awal = 0
akhir = np.pi
hasil = integrasi_romberg(fungsi, awal, akhir, maks_iterasi=5)

print(f"\nEstimasi nilai integral =Â {hasil:.10f}")
